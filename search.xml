<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HashMap原理分析</title>
    <url>/2020/03/13/HashMap%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><strong>[hashmap数据结构]</strong></p>
<p>hashmap是数组和(链表或红黑树)组成的，数据结构中又叫“链表散列”。</p>
<p><strong>数组</strong>：查询速度快，可以根据索引查询；但插入和删除比较困难。<br><strong>链表</strong>：查询速度慢，需要遍历整个链表，但插入和删除操作比较容易。</p>
<p><strong>[hashmap特点]</strong></p>
<p>1) <strong>快速存储</strong> ：hashmap进行 <strong>get</strong> 和 <strong>put</strong> 的时候速度非常快。<br>2) <strong>快速查找</strong>：时间复杂度 <strong>o(1)</strong>，当我们通过 key 去 get 一个value的时候时间复杂度非常的低，效率非常高。<br>3) <strong>可伸缩性</strong>：1. 数组扩容，2. 单向链表如果长度超过 <strong>8</strong> 的话会变成<strong>红黑树</strong>。</p>
<p><strong>[Hash算法]</strong></p>
<p>我们知道在 Java 中所有对象都有 hashcode (使用key)，如果使用 object 对象的hashcode 的话会得到 int 类型的值，hashmap中主要是用他的 key 去计算它的哈希值。</p>
<p><strong>[Hash值的计算]</strong></p>
<p><strong>Hash值 = (hashcode) ^ (hashcode &gt;&gt;&gt; 16)</strong><br>Hashcode与其自身向右位移16位的异或运算。这样可以确保算出来的值足够随机。因为进行hash计算的时候足够分散，以便于计算数组下标的时候算的值足够分散。前面说过hashmap的底层是由数组组成，数组默认大小是16，那么数组下标的计算就是：<strong>数组下标：hash&amp;(16-1) = hash%16</strong><br>对哈希计算得到的hash进行16的求余，得到一个16的位数，比如说是1到15之间的一个数，hashmap 会与 hash值和15进行与运算。这种位运算效率会更高。</p>
<p><strong>[Hash冲突]</strong></p>
<p>不同的对象算出来的数组下标是相同的这样就会产生hash冲突，Hash冲突会产生单向链表。当单向链表达到一定长度后效率会非常低，在jdk1.8以后加入了红黑树，也就是说单线列表达到一定长度后就会变成一个红黑树。</p>
<p><strong>[Hash扩容]</strong></p>
<p>Hashmap的扩容并不是为单向链表准备的，单向链表只是为了解决hash冲突准备的。也就是说当数组达到一定长度，比如说hashmap默认数组长度是16，那么达到触发条件，数组存储比例达到了75% ，也就是16*0.75=12的时候就会发生扩容，同时为了使碰撞几率小，容量扩容是2的幂次方。</p>
<p><strong>红黑树</strong>： 一种二叉树，高效的检索效率。</p>
<p><strong>触发条件</strong>： 当链表长度大于8的时候，链表就会变成红黑树，将后面的数据存在二叉树中。</p>
]]></content>
  </entry>
  <entry>
    <title>基础排序算法</title>
    <url>/2020/04/28/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li><p><strong>选择排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangyulong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2020/04/26 10:37:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 选择排序， 将c[]按升序进行排序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(Comparable[] c)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 数组长度</span></span><br><span class="line">	<span class="keyword">int</span> N = c.length;</span><br><span class="line">	<span class="comment">// 将c[i] 和  c[i+1..N]中最小的元素交换</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="comment">// 默认第 i 个索引位置的元素为最小值的索引</span></span><br><span class="line">		<span class="keyword">int</span> minIndex = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">			<span class="comment">//每次循环找出 minIndex 索引位置元素依次与后面元素的最小值，并把最小值元素的索引放入到minIndex</span></span><br><span class="line">			<span class="keyword">if</span> (SortTemplate.less(c[j], c[minIndex])) &#123;</span><br><span class="line">				minIndex = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 比较后进行数值交换</span></span><br><span class="line">		SortTemplate.swap(c, i, minIndex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p><strong>插入排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangyulong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2020/04/27 16:01:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 插入排序， 将c[]按升序排序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(Comparable[] c)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 数组长度</span></span><br><span class="line">	<span class="keyword">int</span> N = c.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="comment">// 将 c[j] 插入到 c[j-1]、c[j-2]...之中，并循环判断 c[j] 是否小于c[j - 1], 如果小于则对换位置</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; SortTemplate.less(c[j], c[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">			SortTemplate.swap(c, j, j - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p><strong>希尔排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangyulong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2020/04/28 14:41:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 希尔排序算法， 将c[]按升序排序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(Comparable[] c)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N = c.length;</span><br><span class="line">	<span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (h &lt; N / <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="comment">// 1, 4, 13, 40, 121, 364, 1093, ...</span></span><br><span class="line">		h = <span class="number">3</span> * h + <span class="number">1</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">// 将数组变为h有序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; N; i++) &#123; </span><br><span class="line">			<span class="comment">// 将c[i]插入到c[i-h], c[i-2*h], c[i-3*h]... 之中</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; SortTemplate.less(c[j], c[j - h]); j -= h) &#123;</span><br><span class="line">				SortTemplate.swap(c, j, j - h);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		h = h / <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>简单介绍我对 String 的理解</title>
    <url>/2020/04/08/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E6%88%91%E5%AF%B9%20String%20%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<ol>
<li><p><strong>String 内部实际存储结构为 char 数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 用来存储字符串使用 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 缓存字符串的 hash code */</span></span><br><span class="line">  	<span class="comment">// Default to 0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p><strong>String 的多种构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** String 作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = original.value;</span><br><span class="line">       <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** 字符数组作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** StringBuffer 作为参数	*/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">           <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** StringBuilder 作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p><strong>String 的重要方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- equals()	</span><br><span class="line">	首先会比较两个对象的引用，如果两个对象的引用相同，直接返回 <span class="keyword">true</span> 结果；然后通过 <span class="keyword">instanceof</span> 判断需要进行比较的值是否都是String类型，如果类型不同直接 <span class="keyword">false</span> 结果；如果两个进行比较的值都是 String 类型，会都转成  <span class="keyword">char</span>[] 再循环比较每个 <span class="keyword">char</span> 字符，只要有一个不同就返回 <span class="keyword">false</span> 结果。</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 比较两个字符串是否相等 */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//如果两个对象的引用相同，直接返回true结果</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断需要进行比较的值是否都是String类型，如果类型不同直接false结果</span></span><br><span class="line">      <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">          String anotherString = (String)anObject;</span><br><span class="line">          <span class="keyword">int</span> n = value.length;</span><br><span class="line">          <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">              <span class="comment">//把需要比较的字符串全部转成char数组，然后再进行比较</span></span><br><span class="line">              <span class="keyword">char</span> v1[] = value;</span><br><span class="line">              <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">              <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">              <span class="comment">//循环进行比较</span></span><br><span class="line">              <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="comment">//只要有一个不相等就返回false结果</span></span><br><span class="line">                  <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                  i++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- compareTo()</span><br><span class="line">	该方法会循环比较两个字符串的所有字符，当两个字符串中有任何一个字符不相等时，就返回char1 - char2，如果返回值为<span class="number">0</span>，则代表两个字符串相等。</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 比较两个字符串 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">    <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">    <span class="comment">//获取两个字符串中长度最短的 int 值</span></span><br><span class="line">    <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环对比每一个字符串</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">        <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="comment">//如果存在不相等的字符就返回差值</span></span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- intern()</span><br><span class="line">	在调用”tagetString”.intern()方法会首先检查字符串池中是否有”tagetString”这个字符串，如果存在则返回这个字符串的引用，否则就将这个字符串添加到字符串池中，然会返回这个字符串的引用。</span><br><span class="line"></span><br><span class="line"><span class="comment">/**	方法返回字符串对象的规范化表示形式 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">- replace()</span><br><span class="line">  替换字符串中的某些字符</span><br><span class="line">  </span><br><span class="line">- join()</span><br><span class="line">  字符串数组转成字符串</span><br><span class="line">  </span><br><span class="line">- split()</span><br><span class="line">  字符串分割后返回分割字符串数组</span><br><span class="line">  </span><br><span class="line">- trim()</span><br><span class="line">  字符串首尾空格去除</span><br><span class="line">  </span><br><span class="line">- length()</span><br><span class="line">  获取字符串的长度</span><br><span class="line">  </span><br><span class="line">- indexOf()</span><br><span class="line">  查询目标字符串首次出现的下标位置</span><br><span class="line">  </span><br><span class="line">- toLowerCase()</span><br><span class="line">  把字符串全部转换成小写</span><br><span class="line">  </span><br><span class="line">- toUpperCase()</span><br><span class="line">  把字符串全部转换成大写</span><br><span class="line">  </span><br><span class="line">- lastIndexOf()</span><br><span class="line">  查询字符串最后出现的下标位置</span><br><span class="line">  </span><br><span class="line">- contains()</span><br><span class="line">  查询字符串中是否包含另一个字符串</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p><strong>String 用 final 修饰的好处</strong></p>
<ul>
<li><p>便于作为hash中的key</p>
<p>String 的 hash 值经常被使用，常用String 做 HashMap 的 key。final不可变的特性可以使得</p>
<p> hash 值也不可改变，只需要进行一次hash计算即可。</p>
</li>
<li><p>String 常量池的需要</p>
<p>当String被创建时，从String pool中直接获取引用，只有String 不改变，才能从String pool获</p>
<p>取</p>
</li>
<li><p>安全性</p>
<p>String 经常作为参数，String 不可变性可以保证参数不可变。</p>
</li>
<li><p>线程安全</p>
<p>String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</p>
</li>
</ul>
</li>
<li><p><strong>== 和 equals 的区别</strong></p>
<ul>
<li><p>== 是判断两个变量或实例是否指向同一个内存空间，equals 是判断两个变量或实例所指向的</p>
<p>内存空间的值是否相同。</p>
</li>
<li><p>== 指的是对内存地址进行比较 ， equals() 指的是对字符串的内容进行比较。</p>
</li>
<li><p>== 用来判断引用是否相同， equals() 用来判断值是否相同。</p>
</li>
</ul>
</li>
<li><p><strong>String 和 StringBuilder、StringBuffer 的区别</strong></p>
<ul>
<li><p>String 类型是不可变的，所以在字符串拼接时性能很低，因此它只适用于少量的字符串操作。</p>
</li>
<li><p>StringBuilder 的方法没有 synchronized 关键字修饰，所以是非线程安全的，适用于单线程</p>
<p>下在字符串缓冲区进行大量操作。</p>
</li>
<li><p>StringBuffer中大部分方法有 synchronized 关键字修饰，所以是线程安全的，适用于多线程</p>
<p>下在字符串缓冲区进行大量操作。</p>
</li>
</ul>
</li>
<li><p><strong>String 与 JVM</strong></p>
<p>String 的常见创建方式有 String s1 = “Hello” 和 String s2 = new String(“Hello”) 两种：</p>
<ul>
<li><p>JDK 1.8 中，变量 s1 会先到字符串常量池中查找字符串 “Hello”，如果存在 “Hello” 则直接返</p>
<p>回该字符串的引用，如果没有 “Hello” 则会先在常量池中创建此字符串，然后再返回该字符串</p>
<p>的引用；而变量 s2 会直接在堆上创建一个变量，只有调用 intern 方法后才会把此字符串保存</p>
<p>到常量池中。</p>
</li>
<li><p>JDK 1.7 之后把永生代换成的元空间，把字符串常量池从方法区移到了 Java 堆上，同时编译器</p>
<p>还对 String字符串做一些优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"He"</span> + <span class="string">"llo"</span>;</span><br><span class="line">String s2 = <span class="string">"Hello"</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>经过编译器编译优化后，代码 “He” + “llo” 被直接编译成了 “Hello” ，所以 s1 == s2 结果为 </p>
<p>true。</p>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
</search>
