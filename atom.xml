<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  <subtitle>不积跬步无以至千里，不积小流无以成江海！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-07T10:35:53.224Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangyulong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单介绍我对 String 的理解</title>
    <link href="http://yoursite.com/2020/04/08/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E6%88%91%E5%AF%B9%20String%20%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/04/08/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E6%88%91%E5%AF%B9%20String%20%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2020-04-08T09:48:47.665Z</published>
    <updated>2020-04-07T10:35:53.224Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>String 内部实际存储结构为 char 数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 用来存储字符串使用 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 缓存字符串的 hash code */</span></span><br><span class="line">  <span class="comment">// Default to 0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>String 的多种构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** String 作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = original.value;</span><br><span class="line">       <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** 字符数组作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** StringBuffer 作为参数*/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">           <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** StringBuilder 作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><strong>String 的重要方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">- equals()</span><br><span class="line">首先会比较两个对象的引用，如果两个对象的引用相同，直接返回 <span class="keyword">true</span> 结果；然后通过 <span class="keyword">instanceof</span> 判断需要进行比较的值是否都是String类型，如果类型不同直接 <span class="keyword">false</span> 结果；如果两个进行比较的值都是 String 类型，会都转成  <span class="keyword">char</span>[] 再循环比较每个 <span class="keyword">char</span> 字符，只要有一个不同就返回 <span class="keyword">false</span> 结果。</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 比较两个字符串是否相等 */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//如果两个对象的引用相同，直接返回true结果</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断需要进行比较的值是否都是String类型，如果类型不同直接false结果</span></span><br><span class="line">      <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">          String anotherString = (String)anObject;</span><br><span class="line">          <span class="keyword">int</span> n = value.length;</span><br><span class="line">          <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">              <span class="comment">//把需要比较的字符串全部转成char数组，然后再进行比较</span></span><br><span class="line">              <span class="keyword">char</span> v1[] = value;</span><br><span class="line">              <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">              <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">              <span class="comment">//循环进行比较</span></span><br><span class="line">              <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="comment">//只要有一个不相等就返回false结果</span></span><br><span class="line">                  <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                  i++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- compareTo()</span><br><span class="line">该方法会循环比较两个字符串的所有字符，当两个字符串中有任何一个字符不相等时，就返回char1 - char2，如果返回值为<span class="number">0</span>，则代表两个字符串相等。</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 比较两个字符串 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">    <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">    <span class="comment">//获取两个字符串中长度最短的 int 值</span></span><br><span class="line">    <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环对比每一个字符串</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">        <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="comment">//如果存在不相等的字符就返回差值</span></span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- intern()</span><br><span class="line">在调用”tagetString”.intern()方法会首先检查字符串池中是否有”tagetString”这个字符串，如果存在则返回这个字符串的引用，否则就将这个字符串添加到字符串池中，然会返回这个字符串的引用。</span><br><span class="line"></span><br><span class="line"><span class="comment">/**方法返回字符串对象的规范化表示形式 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">- replace()</span><br><span class="line">  替换字符串中的某些字符</span><br><span class="line">  </span><br><span class="line">- join()</span><br><span class="line">  字符串数组转成字符串</span><br><span class="line">  </span><br><span class="line">- split()</span><br><span class="line">  字符串分割后返回分割字符串数组</span><br><span class="line">  </span><br><span class="line">- trim()</span><br><span class="line">  字符串首尾空格去除</span><br><span class="line">  </span><br><span class="line">- length()</span><br><span class="line">  获取字符串的长度</span><br><span class="line">  </span><br><span class="line">- indexOf()</span><br><span class="line">  查询目标字符串首次出现的下标位置</span><br><span class="line">  </span><br><span class="line">- toLowerCase()</span><br><span class="line">  把字符串全部转换成小写</span><br><span class="line">  </span><br><span class="line">- toUpperCase()</span><br><span class="line">  把字符串全部转换成大写</span><br><span class="line">  </span><br><span class="line">- lastIndexOf()</span><br><span class="line">  查询字符串最后出现的下标位置</span><br><span class="line">  </span><br><span class="line">- contains()</span><br><span class="line">  查询字符串中是否包含另一个字符串</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><strong>String 用 final 修饰的好处</strong></p><ul><li><p>便于作为hash中的key</p><p>String 的 hash 值经常被使用，常用String 做 HashMap 的 key。final不可变的特性可以使得</p><p> hash 值也不可改变，只需要进行一次hash计算即可。</p></li><li><p>String 常量池的需要</p><p>当String被创建时，从String pool中直接获取引用，只有String 不改变，才能从String pool获</p><p>取</p></li><li><p>安全性</p><p>String 经常作为参数，String 不可变性可以保证参数不可变。</p></li><li><p>线程安全</p><p>String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</p></li></ul></li><li><p><strong>== 和 equals 的区别</strong></p><ul><li><p>== 是判断两个变量或实例是否指向同一个内存空间，equals 是判断两个变量或实例所指向的</p><p>内存空间的值是否相同。</p></li><li><p>== 指的是对内存地址进行比较 ， equals() 指的是对字符串的内容进行比较。</p></li><li><p>== 用来判断引用是否相同， equals() 用来判断值是否相同。</p></li></ul></li><li><p><strong>String 和 StringBuilder、StringBuffer 的区别</strong></p><ul><li><p>String 类型是不可变的，所以在字符串拼接时性能很低，因此它只适用于少量的字符串操作。</p></li><li><p>StringBuilder 的方法没有 synchronized 关键字修饰，所以是非线程安全的，适用于单线程</p><p>下在字符串缓冲区进行大量操作。</p></li><li><p>StringBuffer中大部分方法有 synchronized 关键字修饰，所以是线程安全的，适用于多线程</p><p>下在字符串缓冲区进行大量操作。</p></li></ul></li><li><p><strong>String 与 JVM</strong></p><p>String 的常见创建方式有 String s1 = “Hello” 和 String s2 = new String(“Hello”) 两种：</p><ul><li><p>JDK 1.8 中，变量 s1 会先到字符串常量池中查找字符串 “Hello”，如果存在 “Hello” 则直接返</p><p>回该字符串的引用，如果没有 “Hello” 则会先在常量池中创建此字符串，然后再返回该字符串</p><p>的引用；而变量 s2 会直接在堆上创建一个变量，只有调用 intern 方法后才会把此字符串保存</p><p>到常量池中。</p></li><li><p>JDK 1.7 之后把永生代换成的元空间，把字符串常量池从方法区移到了 Java 堆上，同时编译器</p><p>还对 String字符串做一些优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"He"</span> + <span class="string">"llo"</span>;</span><br><span class="line">String s2 = <span class="string">"Hello"</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>经过编译器编译优化后，代码 “He” + “llo” 被直接编译成了 “Hello” ，所以 s1 == s2 结果为 </p><p>true。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;String 内部实际存储结构为 char 数组&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
