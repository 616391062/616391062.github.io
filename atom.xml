<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  <subtitle>不积跬步无以至千里，不积小流无以成江海！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-13T05:40:33.053Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangyulong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 日志logback配置</title>
    <link href="http://yoursite.com/2020/11/12/Spring%20Boot%20%E6%97%A5%E5%BF%97logback%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/11/12/Spring%20Boot%20%E6%97%A5%E5%BF%97logback%E9%85%8D%E7%BD%AE/</id>
    <published>2020-11-12T08:54:01.159Z</published>
    <updated>2020-11-13T05:40:33.053Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 日志logback配置</p><ol><li><p>logback-spring.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span> = <span class="string">"true"</span> <span class="attr">scanPeriod</span> = <span class="string">"60"</span> <span class="attr">debug</span> = <span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 设置上下文名称, 可以通过%contextName来打印日志上下文名称，一般来说我们不用这个属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback-test<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 用来定义变量值的标签, 有两个属性 name和value；其中name的值是变量的名称，value的值时变量定义的值。 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logback.logdir"</span> <span class="attr">value</span>=<span class="string">"/Users/wangyulong/eclipse-workspace/springboot-test/log"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logback.appname"</span> <span class="attr">value</span>=<span class="string">"TEST_APP"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--application.properties 传递参数，不能使用logback 自带的&lt;property&gt;标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"logdir"</span> <span class="attr">source</span>=<span class="string">"logback.logdir"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。</span></span><br><span class="line"><span class="comment">logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log</span></span><br><span class="line"><span class="comment">logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log</span></span><br><span class="line"><span class="comment">如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。</span></span><br><span class="line"><span class="comment">如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log </span></span><br><span class="line"><span class="comment">注：二者不能同时使用，如若同时使用，则只有logging.file生效</span></span><br><span class="line"><span class="comment">默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">source</span>=<span class="string">"logging.file"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- layout和encoder，都可以将事件转换为格式化后的日志记录，但是控制台输出使用layout，文件输出使用encoder --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 输出到控制台 ConsoleAppender 1 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;appender class="ch.qos.logback.core.ConsoleAppender" name="console_1" target="System.out"&gt;</span></span><br><span class="line"><span class="comment">   展示格式 layout</span></span><br><span class="line"><span class="comment">     &lt;layout class="ch.qos.logback.classic.PatternLayout"&gt;</span></span><br><span class="line"><span class="comment">        &lt;pattern&gt;%d [REQUEST ID:%X&#123;requestId&#125;] [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">     &lt;/layout&gt;</span></span><br><span class="line"><span class="comment">  &lt;/appender&gt; --&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 输出到控制台 ConsoleAppender 2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">target</span>=<span class="string">"System.out"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- encoder表示对日志进行编码：</span></span><br><span class="line"><span class="comment">%d&#123;HH: mm:ss.SSS&#125;——日志输出时间</span></span><br><span class="line"><span class="comment">%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</span></span><br><span class="line"><span class="comment">%-5level——日志级别，并且使用5个字符靠左对齐</span></span><br><span class="line"><span class="comment">%logger&#123;36&#125;——日志输出者的名字</span></span><br><span class="line"><span class="comment">%msg——日志消息</span></span><br><span class="line"><span class="comment">%n——平台的换行符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %contextName $&#123;logback.appname&#125; [REQUEST ID:%X&#123;requestId&#125;] [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt;</span></span><br><span class="line"><span class="comment">         &lt;level&gt;ERROR&lt;/level&gt;</span></span><br><span class="line"><span class="comment">    &lt;/filter&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 输出到文件 RollingFileAppender 1 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileInfoLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，</span></span><br><span class="line"><span class="comment">    所以我们使用下面的策略，可以避免输出 Error 的日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤 Error--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--匹配到就禁止--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--没有匹配到就允许--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则</span></span><br><span class="line"><span class="comment">        如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天</span></span><br><span class="line"><span class="comment">        的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;logback.logdir&#125;/info.$&#123;logback.appname&#125;.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;logback.logdir&#125;/info.$&#123;logback.appname&#125;.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只保留最近90天的日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>90<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志输出编码格式化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d [%thread] %-5level %logger&#123;36&#125; %line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 输出到文件 RollingFileAppender 2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileErrorLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则</span></span><br><span class="line"><span class="comment">        如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天</span></span><br><span class="line"><span class="comment">        的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;logback.logdir&#125;/error.$&#123;logback.appname&#125;.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;logback.logdir&#125;/error.$&#123;logback.appname&#125;.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只保留最近90天的日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>90<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志输出编码格式化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d [%thread] %-5level %logger&#123;36&#125; %line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">&lt;!-- loger 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定 appender 。loger 仅有一个name属性，一个可选的level和一个可选的addtivity属性</span></span><br><span class="line"><span class="comment">name:用来指定受此loger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">addtivity:是否向上级loger传递打印信息。默认是true. --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 将控制controller包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级的日志级别“info”</span></span><br><span class="line"><span class="comment">  没有设置addtivity，默认为true，将此loger的打印信息向上级传递；</span></span><br><span class="line"><span class="comment">没有设置appender，此loger本身不打印任何信息。</span></span><br><span class="line"><span class="comment">&lt;root level="info"&gt;将root的打印级别设置为“info”，指定了名字为“console”的appender。 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;logger name="com.api.mytest.HelloController"/&gt; --&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">&lt;!-- 控制com.api.mytest.HelloController类的日志打印，打印级别为“WARN”;</span></span><br><span class="line"><span class="comment">additivity属性为false，表示此loger的打印信息不再向上级传递;</span></span><br><span class="line"><span class="comment">指定了名字为“console”的appender;</span></span><br><span class="line"><span class="comment">这时候执行com.dudu.controller.LearnController类的login方法时，</span></span><br><span class="line"><span class="comment">先执行&lt;logger name="com.dudu.controller.LearnController" level="WARN" additivity="false"&gt;,</span></span><br><span class="line"><span class="comment">将级别为“WARN”及大于“WARN”的日志信息交给此loger指定的名为“console”的appender处理，在控制台中打出日志，不再向上级root传递打印信息 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;logger name="com.api.mytest.HelloController" level="WARN" additivity="false"&gt;</span></span><br><span class="line"><span class="comment">      &lt;appender-ref ref="console"/&gt;</span></span><br><span class="line"><span class="comment">   &lt;/logger&gt; --&gt;</span></span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 测试环境+开发环境. 多个使用逗号隔开. 测试时把 async-log_2 注释 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;springProfile name="test,dev"&gt;</span></span><br><span class="line"><span class="comment">        &lt;logger name="com.api.mytest.HelloController" level="DEBUG" additivity="false"&gt;</span></span><br><span class="line"><span class="comment">        输出到文件</span></span><br><span class="line"><span class="comment">            &lt;appender-ref ref="fileErrorLog"/&gt;</span></span><br><span class="line"><span class="comment">            输出到控制台</span></span><br><span class="line"><span class="comment">            &lt;appender-ref ref="console"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/logger&gt;</span></span><br><span class="line"><span class="comment">    &lt;/springProfile&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 生产环境. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;springProfile name="prod"&gt;</span></span><br><span class="line"><span class="comment">        &lt;logger name="com.api.mytest.HelloController" level="INFO" additivity="false"&gt;</span></span><br><span class="line"><span class="comment">            &lt;appender-ref ref="console"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/logger&gt;</span></span><br><span class="line"><span class="comment">    &lt;/springProfile&gt; --&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- AsyncAppender，异步记录日志 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span> <span class="attr">name</span>=<span class="string">"async-log"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- BlockingQueue的最大容量，默认情况下，大小为256。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>500<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxFlushTime</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">maxFlushTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- &lt;appender class="ch.qos.logback.classic.AsyncAppender" name="async-log_1"&gt;</span></span><br><span class="line"><span class="comment">    &lt;appender-ref ref="console_1"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;queueSize&gt;500&lt;/queueSize&gt;</span></span><br><span class="line"><span class="comment">    &lt;maxFlushTime&gt;1000&lt;/maxFlushTime&gt;</span></span><br><span class="line"><span class="comment">  &lt;/appender&gt; --&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span> <span class="attr">name</span>=<span class="string">"async-log_2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileErrorLog"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- BlockingQueue的最大容量，默认情况下，大小为256。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>500<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maxFlushTime</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">maxFlushTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- &lt;appender class="ch.qos.logback.classic.AsyncAppender" name="async-log_3"&gt;</span></span><br><span class="line"><span class="comment">    &lt;appender-ref ref="fileInfoLog"/&gt;</span></span><br><span class="line"><span class="comment">    BlockingQueue的最大容量，默认情况下，大小为256。</span></span><br><span class="line"><span class="comment">    &lt;queueSize&gt;500&lt;/queueSize&gt;</span></span><br><span class="line"><span class="comment">    &lt;maxFlushTime&gt;1000&lt;/maxFlushTime&gt;</span></span><br><span class="line"><span class="comment">  &lt;/appender&gt; --&gt;</span></span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- level:用来设置打印级别，默认是DEBUG, 可以包含零个或多个元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"async-log"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;appender-ref ref="async-log_1"/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"async-log_2"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;appender-ref ref="async-log_3"/&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.properties文件配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span> = <span class="string">8088</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logging.pattern.level</span> = <span class="string">"[REQUEST ID:%X&#123;requestId&#125;][REQUEST IP: %X&#123;requestIp&#125;]"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logging.path</span> = <span class="string">/Users/wangyulong/eclipse-workspace/springboot-test/log</span></span><br><span class="line"><span class="meta">logging.file</span> = <span class="string">/Users/wangyulong/eclipse-workspace/springboot-test/log/test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.profiles.active</span>: <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logback.logdir</span> = <span class="string">/Users/wangyulong/eclipse-workspace/springboot-test/log</span></span><br></pre></td></tr></table></figure></li><li><p>测试用controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.api.mytest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"api"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(name = <span class="string">"type"</span>)</span> String type) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(type)) &#123;</span><br><span class="line">String[] split = type.split(<span class="string">"_"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">String caseType = split[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (caseType) &#123;</span><br><span class="line"><span class="comment">//TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"TRACE"</span>:</span><br><span class="line">log.trace(<span class="string">"this is TRACE level msg"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"DEBUG"</span>:</span><br><span class="line">log.debug(<span class="string">"this is DEBUG level msg"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"INFO"</span>:</span><br><span class="line">log.info(<span class="string">"this is INFO level msg"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"WARN"</span>:</span><br><span class="line">log.warn(<span class="string">"this is WARN level msg"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"ERROR"</span>:</span><br><span class="line">log.error(<span class="string">"this is ERROR level msg"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"ALL"</span>:</span><br><span class="line">log.trace(<span class="string">"this is TRACE level msg"</span>);</span><br><span class="line">log.debug(<span class="string">"this is DEBUG level msg"</span>);</span><br><span class="line">log.info(<span class="string">"this is INFO level msg"</span>);</span><br><span class="line">log.warn(<span class="string">"this is WARN level msg"</span>);</span><br><span class="line">log.error(<span class="string">"this is ERROR level msg"</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"NOT OK"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ApiApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>pom文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.api&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springboot-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;packaging&gt;war&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;com.api&lt;&#x2F;name&gt;</span><br><span class="line">&lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">&lt;!-- 针对pom文件头部报错解决方案，此错误不影响程序运行，仅对强迫症有害 --&gt;</span><br><span class="line">&lt;maven-jar-plugin.version&gt;3.0.0&lt;&#x2F;maven-jar-plugin.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;3.8&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.18.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Boot 日志logback配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;logback-spring.xml文件&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Redis击穿、穿透、雪崩以及解决方案</title>
    <link href="http://yoursite.com/2020/04/29/Redis%E5%87%BB%E7%A9%BF%E3%80%81%E7%A9%BF%E9%80%8F%E3%80%81%E9%9B%AA%E5%B4%A9%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2020/04/29/Redis%E5%87%BB%E7%A9%BF%E3%80%81%E7%A9%BF%E9%80%8F%E3%80%81%E9%9B%AA%E5%B4%A9%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2020-04-29T05:43:10.000Z</published>
    <updated>2020-05-07T03:10:35.719Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><ol><li><p><strong>击穿</strong>：<strong>单个key</strong>在缓存中查不到，去数据库查询，如果数据库数据量大并且是<strong>高并发</strong>的情况下那么就可能会造成数据库压力过大而崩溃。</p><p>注意: <strong>指的是单个key发生高并发</strong></p><p><strong>解决方案：</strong></p><p>（1）<strong>通过synchronized+双重检查机制：某个key只让一个线程查询，阻塞其它线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">在同步块中，继续判断检查，保证不存在，才去查DB。</span><br><span class="line">  例如:    </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> volaite Object lockHelp=<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">     String value=redis.get(key,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">     <span class="keyword">if</span>(value==<span class="string">"null"</span>||value==<span class="keyword">null</span>||StringUtils.isBlank(value)&#123;</span><br><span class="line">         <span class="keyword">synchronized</span>(lockHelp)&#123;</span><br><span class="line">                value=redis.get(key,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                 <span class="keyword">if</span>(value==<span class="string">"null"</span>||value==<span class="keyword">null</span>||StringUtils.isBlank(value)&#123;</span><br><span class="line">                     value=db.query(key);</span><br><span class="line">                      redis.set(key,value,<span class="number">1000</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;    </span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：   会阻塞其它线程</strong></p><p>（2）<strong>设置value永不过期</strong></p><pre><code>这种方式可以说是最可靠的，最安全的但是占空间，内存消耗大，并且不能保持数据最新 这个需要根据具体的业务逻辑来做，个人觉得如果要保持数据最新不妨这么试试，仅供参考：</code></pre><p>​        起个定时任务或者利用TimerTask 做定时，每个一段时间多这些值进行数据库查询更新一次缓存，当然前提时不会给数据库造成压力过大(这个很重要)</p><p>（3）<strong>使用互斥锁(mutex key</strong>)</p><pre><code>业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。</code></pre><p>SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。在redis2.6.1之前版本未实现setnx的过期时间，所以这里给出两种版本代码参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(key)</span> </span>&#123;</span><br><span class="line">   String value = redis.get(key);</span><br><span class="line">   <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">//代表缓存值过期</span></span><br><span class="line">     <span class="comment">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db</span></span><br><span class="line">      <span class="keyword">if</span> (redis.setnx(key_mutex, <span class="number">1</span>, <span class="number">3</span> * <span class="number">60</span>) == <span class="number">1</span>) &#123;  <span class="comment">//代表设置成功</span></span><br><span class="line">        value = db.get(key);</span><br><span class="line">           redis.set(key, value, expire_secs);</span><br><span class="line">           redis.del(key_mutex);</span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;  <span class="comment">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可</span></span><br><span class="line">           sleep(<span class="number">10</span>);</span><br><span class="line">           get(key);  <span class="comment">//重试</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> value;    </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点:</strong></p><ol><li><p>代码复杂度增大</p></li><li><p>存在死锁的风险</p></li><li><p>存在线程池阻塞的风险</p></li></ol></li><li><p><strong>雪崩</strong>：<strong>多个key查询并且出现高并发</strong>，缓存中失效或者查不到，然后都去db查询，从而导致db压力突然飙升，从而崩溃。</p><p><strong>出现原因:</strong>  key同时失效</p><p>​                  redis本身崩溃了</p><p><strong>解决方案:</strong></p><ol><li>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。(跟击穿的第一个方案类似，但是这样是避免不了其它key去查数据库，只能减少查询的次数)</li><li>可以通过缓存reload机制，预先去更新缓存，再即将发生大并发访问前手动触发加载缓存</li><li>不同的key，设置不同的过期时间，具体值可以根据业务决定，让缓存失效的时间点尽量均匀</li><li>做二级缓存，或者双缓存策略。A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期。(这种方式复杂点)</li></ol></li><li><p><strong>穿透：</strong> <strong>key缓存并且数据库不存在</strong>，所以每次查询都会查询数据库从而导致数据库崩溃。</p><p>一般是出现这种情况是因为恶意频繁查询才会对系统造成很大的问题: key缓存并且数据库不存在，所以每次查询都会查询数据库从而导致数据库崩溃。</p><p><strong>解决方案:</strong></p><p>（1）<strong>使用布隆过滤器: 热点数据等场景(具体看使用场景)</strong></p><p><strong>布隆过滤器是什么？</strong></p><p>布隆过滤器可以理解为一个不怎么精确的 set 结构，当你使用它的 contains 方法判断某个对象是否存在时，它可能会误判。但是布隆过滤器也不是特别不精确，只要参数设置的合理，它的精确度可以控制的相对足够精确，只会有小小的误判概率。</p><p>当布隆过滤器说某个值存在时，这个值可能不存在；当它说不存在时，那就肯定不存在。打个比方，当它说不认识你时，肯定就不认识；当它说见过你时，可能根本就没见过面，不过因为你的脸跟它认识的人中某脸比较相似 (某些熟脸的系数组合)，所以误判以前见过你。</p><p><strong>注意：</strong></p><p>BloomFilter的关键在于hash算法的设定和bit数组的大小确定，通过权衡得到一个错误概率可以接受的结果。 我们设置的容错率越小那么过滤函数也就多，分配的空间也就越大(存放bits)，那么误判率也就越小。</p><p><strong>缺点:</strong> 会存在一定的误判率；</p><p>​          对新增加的数据无法进行布隆过滤；</p><p>​          数据的key不会频繁的更改；</p><p>（2）<strong>将击透的key缓存起来，但是时间不能太长，下次进来是直接返回不存在</strong>。 但是这种情况无法过滤掉动态的key，就是说每次请求进来都是不同额key，这样还是会造成这个问题。</p><p>​         </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;击穿&lt;/strong&gt;：&lt;strong&gt;单个key&lt;/strong&gt;在缓存中查不到，去数据库查询，如果数据库数据量大并且是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基础排序算法</title>
    <link href="http://yoursite.com/2020/04/28/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/04/28/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-04-28T09:55:44.712Z</published>
    <updated>2020-04-28T10:13:28.701Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>选择排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangyulong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2020/04/26 10:37:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 选择排序， 将c[]按升序进行排序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(Comparable[] c)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 数组长度</span></span><br><span class="line"><span class="keyword">int</span> N = c.length;</span><br><span class="line"><span class="comment">// 将c[i] 和  c[i+1..N]中最小的元素交换</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="comment">// 默认第 i 个索引位置的元素为最小值的索引</span></span><br><span class="line"><span class="keyword">int</span> minIndex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line"><span class="comment">//每次循环找出 minIndex 索引位置元素依次与后面元素的最小值，并把最小值元素的索引放入到minIndex</span></span><br><span class="line"><span class="keyword">if</span> (SortTemplate.less(c[j], c[minIndex])) &#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较后进行数值交换</span></span><br><span class="line">SortTemplate.swap(c, i, minIndex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>插入排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangyulong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2020/04/27 16:01:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 插入排序， 将c[]按升序排序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(Comparable[] c)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 数组长度</span></span><br><span class="line"><span class="keyword">int</span> N = c.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="comment">// 将 c[j] 插入到 c[j-1]、c[j-2]...之中，并循环判断 c[j] 是否小于c[j - 1], 如果小于则对换位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; SortTemplate.less(c[j], c[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">SortTemplate.swap(c, j, j - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><strong>希尔排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangyulong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2020/04/28 14:41:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 希尔排序算法， 将c[]按升序排序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(Comparable[] c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = c.length;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (h &lt; N / <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// 1, 4, 13, 40, 121, 364, 1093, ...</span></span><br><span class="line">h = <span class="number">3</span> * h + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 将数组变为h有序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; N; i++) &#123; </span><br><span class="line"><span class="comment">// 将c[i]插入到c[i-h], c[i-2*h], c[i-3*h]... 之中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; SortTemplate.less(c[j], c[j - h]); j -= h) &#123;</span><br><span class="line">SortTemplate.swap(c, j, j - h);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h = h / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择排序&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>简单介绍我对 String 的理解</title>
    <link href="http://yoursite.com/2020/04/08/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E6%88%91%E5%AF%B9%20String%20%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/04/08/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E6%88%91%E5%AF%B9%20String%20%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2020-04-08T09:48:47.665Z</published>
    <updated>2020-04-07T10:35:53.224Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>String 内部实际存储结构为 char 数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 用来存储字符串使用 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 缓存字符串的 hash code */</span></span><br><span class="line">  <span class="comment">// Default to 0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>String 的多种构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** String 作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = original.value;</span><br><span class="line">       <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** 字符数组作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** StringBuffer 作为参数*/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">           <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** StringBuilder 作为参数 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><strong>String 的重要方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">- equals()</span><br><span class="line">首先会比较两个对象的引用，如果两个对象的引用相同，直接返回 <span class="keyword">true</span> 结果；然后通过 <span class="keyword">instanceof</span> 判断需要进行比较的值是否都是String类型，如果类型不同直接 <span class="keyword">false</span> 结果；如果两个进行比较的值都是 String 类型，会都转成  <span class="keyword">char</span>[] 再循环比较每个 <span class="keyword">char</span> 字符，只要有一个不同就返回 <span class="keyword">false</span> 结果。</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 比较两个字符串是否相等 */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//如果两个对象的引用相同，直接返回true结果</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断需要进行比较的值是否都是String类型，如果类型不同直接false结果</span></span><br><span class="line">      <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">          String anotherString = (String)anObject;</span><br><span class="line">          <span class="keyword">int</span> n = value.length;</span><br><span class="line">          <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">              <span class="comment">//把需要比较的字符串全部转成char数组，然后再进行比较</span></span><br><span class="line">              <span class="keyword">char</span> v1[] = value;</span><br><span class="line">              <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">              <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">              <span class="comment">//循环进行比较</span></span><br><span class="line">              <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="comment">//只要有一个不相等就返回false结果</span></span><br><span class="line">                  <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                  i++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- compareTo()</span><br><span class="line">该方法会循环比较两个字符串的所有字符，当两个字符串中有任何一个字符不相等时，就返回char1 - char2，如果返回值为<span class="number">0</span>，则代表两个字符串相等。</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 比较两个字符串 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">    <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">    <span class="comment">//获取两个字符串中长度最短的 int 值</span></span><br><span class="line">    <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">    <span class="keyword">char</span> v1[] = value;</span><br><span class="line">    <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环对比每一个字符串</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">        <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="comment">//如果存在不相等的字符就返回差值</span></span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- intern()</span><br><span class="line">在调用”tagetString”.intern()方法会首先检查字符串池中是否有”tagetString”这个字符串，如果存在则返回这个字符串的引用，否则就将这个字符串添加到字符串池中，然会返回这个字符串的引用。</span><br><span class="line"></span><br><span class="line"><span class="comment">/**方法返回字符串对象的规范化表示形式 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">- replace()</span><br><span class="line">  替换字符串中的某些字符</span><br><span class="line">  </span><br><span class="line">- join()</span><br><span class="line">  字符串数组转成字符串</span><br><span class="line">  </span><br><span class="line">- split()</span><br><span class="line">  字符串分割后返回分割字符串数组</span><br><span class="line">  </span><br><span class="line">- trim()</span><br><span class="line">  字符串首尾空格去除</span><br><span class="line">  </span><br><span class="line">- length()</span><br><span class="line">  获取字符串的长度</span><br><span class="line">  </span><br><span class="line">- indexOf()</span><br><span class="line">  查询目标字符串首次出现的下标位置</span><br><span class="line">  </span><br><span class="line">- toLowerCase()</span><br><span class="line">  把字符串全部转换成小写</span><br><span class="line">  </span><br><span class="line">- toUpperCase()</span><br><span class="line">  把字符串全部转换成大写</span><br><span class="line">  </span><br><span class="line">- lastIndexOf()</span><br><span class="line">  查询字符串最后出现的下标位置</span><br><span class="line">  </span><br><span class="line">- contains()</span><br><span class="line">  查询字符串中是否包含另一个字符串</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><strong>String 用 final 修饰的好处</strong></p><ul><li><p>便于作为hash中的key</p><p>String 的 hash 值经常被使用，常用String 做 HashMap 的 key。final不可变的特性可以使得</p><p> hash 值也不可改变，只需要进行一次hash计算即可。</p></li><li><p>String 常量池的需要</p><p>当String被创建时，从String pool中直接获取引用，只有String 不改变，才能从String pool获</p><p>取</p></li><li><p>安全性</p><p>String 经常作为参数，String 不可变性可以保证参数不可变。</p></li><li><p>线程安全</p><p>String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</p></li></ul></li><li><p><strong>== 和 equals 的区别</strong></p><ul><li><p>== 是判断两个变量或实例是否指向同一个内存空间，equals 是判断两个变量或实例所指向的</p><p>内存空间的值是否相同。</p></li><li><p>== 指的是对内存地址进行比较 ， equals() 指的是对字符串的内容进行比较。</p></li><li><p>== 用来判断引用是否相同， equals() 用来判断值是否相同。</p></li></ul></li><li><p><strong>String 和 StringBuilder、StringBuffer 的区别</strong></p><ul><li><p>String 类型是不可变的，所以在字符串拼接时性能很低，因此它只适用于少量的字符串操作。</p></li><li><p>StringBuilder 的方法没有 synchronized 关键字修饰，所以是非线程安全的，适用于单线程</p><p>下在字符串缓冲区进行大量操作。</p></li><li><p>StringBuffer中大部分方法有 synchronized 关键字修饰，所以是线程安全的，适用于多线程</p><p>下在字符串缓冲区进行大量操作。</p></li></ul></li><li><p><strong>String 与 JVM</strong></p><p>String 的常见创建方式有 String s1 = “Hello” 和 String s2 = new String(“Hello”) 两种：</p><ul><li><p>JDK 1.8 中，变量 s1 会先到字符串常量池中查找字符串 “Hello”，如果存在 “Hello” 则直接返</p><p>回该字符串的引用，如果没有 “Hello” 则会先在常量池中创建此字符串，然后再返回该字符串</p><p>的引用；而变量 s2 会直接在堆上创建一个变量，只有调用 intern 方法后才会把此字符串保存</p><p>到常量池中。</p></li><li><p>JDK 1.7 之后把永生代换成的元空间，把字符串常量池从方法区移到了 Java 堆上，同时编译器</p><p>还对 String字符串做一些优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"He"</span> + <span class="string">"llo"</span>;</span><br><span class="line">String s2 = <span class="string">"Hello"</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>经过编译器编译优化后，代码 “He” + “llo” 被直接编译成了 “Hello” ，所以 s1 == s2 结果为 </p><p>true。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;String 内部实际存储结构为 char 数组&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HashMap原理分析</title>
    <link href="http://yoursite.com/2020/03/13/HashMap%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/03/13/HashMap%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</id>
    <published>2020-03-13T10:29:58.000Z</published>
    <updated>2020-04-29T03:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>[hashmap数据结构]</strong></p><p>hashmap是数组和(链表或红黑树)组成的，数据结构中又叫“链表散列”。</p><p><strong>数组</strong>：查询速度快，可以根据索引查询；但插入和删除比较困难。<br><strong>链表</strong>：查询速度慢，需要遍历整个链表，但插入和删除操作比较容易。</p><p><strong>[hashmap特点]</strong></p><p>1) <strong>快速存储</strong> ：hashmap进行 <strong>get</strong> 和 <strong>put</strong> 的时候速度非常快。<br>2) <strong>快速查找</strong>：时间复杂度 <strong>o(1)</strong>，当我们通过 key 去 get 一个value的时候时间复杂度非常的低，效率非常高。<br>3) <strong>可伸缩性</strong>：1. 数组扩容，2. 单向链表如果长度超过 <strong>8</strong> 的话会变成<strong>红黑树</strong>。</p><p><strong>[Hash算法]</strong></p><p>我们知道在 Java 中所有对象都有 hashcode (使用key)，如果使用 object 对象的hashcode 的话会得到 int 类型的值，hashmap中主要是用他的 key 去计算它的哈希值。</p><p><strong>[Hash值的计算]</strong></p><p><strong>Hash值 = (hashcode) ^ (hashcode &gt;&gt;&gt; 16)</strong><br>Hashcode与其自身向右位移16位的异或运算。这样可以确保算出来的值足够随机。因为进行hash计算的时候足够分散，以便于计算数组下标的时候算的值足够分散。前面说过hashmap的底层是由数组组成，数组默认大小是16，那么数组下标的计算就是：<strong>数组下标：hash&amp;(16-1) = hash%16</strong><br>对哈希计算得到的hash进行16的求余，得到一个16的位数，比如说是1到15之间的一个数，hashmap 会与 hash值和15进行与运算。这种位运算效率会更高。</p><p><strong>[Hash冲突]</strong></p><p>不同的对象算出来的数组下标是相同的这样就会产生hash冲突，Hash冲突会产生单向链表。当单向链表达到一定长度后效率会非常低，在jdk1.8以后加入了红黑树，也就是说单线列表达到一定长度后就会变成一个红黑树。</p><p><strong>[Hash扩容]</strong></p><p>Hashmap的扩容并不是为单向链表准备的，单向链表只是为了解决hash冲突准备的。也就是说当数组达到一定长度，比如说hashmap默认数组长度是16，那么达到触发条件，数组存储比例达到了75% ，也就是16*0.75=12的时候就会发生扩容，同时为了使碰撞几率小，容量扩容是2的幂次方。</p><p><strong>红黑树</strong>： 一种二叉树，高效的检索效率。</p><p><strong>触发条件</strong>： 当链表长度大于8的时候，链表就会变成红黑树，将后面的数据存在二叉树中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;[hashmap数据结构]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hashmap是数组和(链表或红黑树)组成的，数据结构中又叫“链表散列”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;：查询速度快，可以根据索引查询；但插入和删除比较困难。&lt;br&gt;&lt;str
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
